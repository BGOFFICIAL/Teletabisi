{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\npral\\\\OneDrive\\\\Radna povr\\u0161ina\\\\Spring\\\\web\\\\src\\\\Loginic\\\\Login.js\",\n  _s = $RefreshSig$();\n// Importi i druge deklaracije\nimport React, { useState, useEffect } from 'react';\nimport { useLocalState } from '../util/useLocalStorage';\nimport { jwtDecode } from \"jwt-decode\";\nimport { Button, Form, Row, Col, Container, Navbar, Nav } from 'react-bootstrap';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Login = () => {\n  _s();\n  // Stanja za login\n  const [username, setUsername] = useState(\"\");\n  const [password, setPassword] = useState(\"\");\n  const [jwt, setJwt] = useLocalState(\"\", \"jwt\");\n  const [loginError, setLoginError] = useState(\"\");\n\n  // Funkcija za provjeru rola nakon dekodiranja JWT-a\n  const checkRoles = () => {\n    if (jwt) {\n      const decoded = jwtDecode(jwt);\n      if (decoded.roles[0].authority === \"ADMIN\") {\n        window.location.href = \"/admin\";\n      }\n      if (decoded.roles[0].authority === \"USER\") {\n        window.location.href = \"/user\";\n      }\n    }\n  };\n\n  // Effect koji će se izvršiti kada se promijeni jwt\n  useEffect(() => {\n    checkRoles();\n  }, [jwt]);\n\n  // Funkcija za slanje zahtjeva za prijavu\n  const sendLoginRequest = async () => {\n    try {\n      const reqBody = {\n        \"username\": username,\n        \"password\": password\n      };\n      const response = await fetch(\"http://localhost:8080/api/v1/auth/authenticate\", {\n        headers: {\n          \"Content-Type\": \"application/json\"\n        },\n        method: \"POST\",\n        body: JSON.stringify(reqBody)\n      });\n      if (response.ok) {\n        const data = await response.json();\n        setJwt(data.token);\n        checkRoles();\n      } else {\n        setLoginError(\"Invalid username or password\");\n      }\n    } catch (error) {\n      console.error(\"Error:\", error);\n    }\n  };\n\n  // JSX za prikaz komponente\n  return /*#__PURE__*/_jsxDEV(Container, {\n    className: \"justify-content-md-center\",\n    children: /*#__PURE__*/_jsxDEV(Form, {\n      noValidate: true,\n      children: [/*#__PURE__*/_jsxDEV(Row, {\n        className: \"justify-content-md-center\",\n        children: /*#__PURE__*/_jsxDEV(Col, {\n          xs: 6,\n          children: loginError && /*#__PURE__*/_jsxDEV(\"div\", {\n            style: {\n              color: 'red'\n            },\n            children: loginError\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 71,\n            columnNumber: 28\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 70,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 69,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Row, {\n        className: \"justify-content-md-center\",\n        children: /*#__PURE__*/_jsxDEV(Col, {\n          xs: 2,\n          children: /*#__PURE__*/_jsxDEV(Button, {\n            className: \"mb-3\",\n            onClick: () => sendLoginRequest(),\n            children: \"Prijavi se\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 76,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 75,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 74,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 67,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 62,\n    columnNumber: 5\n  }, this);\n};\n_s(Login, \"0MCbzpoF3hqzg34Ffj5zge5yc14=\", false, function () {\n  return [useLocalState];\n});\n_c = Login;\nexport default Login;\nvar _c;\n$RefreshReg$(_c, \"Login\");","map":{"version":3,"names":["React","useState","useEffect","useLocalState","jwtDecode","Button","Form","Row","Col","Container","Navbar","Nav","jsxDEV","_jsxDEV","Login","_s","username","setUsername","password","setPassword","jwt","setJwt","loginError","setLoginError","checkRoles","decoded","roles","authority","window","location","href","sendLoginRequest","reqBody","response","fetch","headers","method","body","JSON","stringify","ok","data","json","token","error","console","className","children","noValidate","xs","style","color","fileName","_jsxFileName","lineNumber","columnNumber","onClick","_c","$RefreshReg$"],"sources":["C:/Users/npral/OneDrive/Radna površina/Spring/web/src/Loginic/Login.js"],"sourcesContent":["// Importi i druge deklaracije\r\nimport React, { useState, useEffect } from 'react';\r\nimport { useLocalState } from '../util/useLocalStorage';\r\nimport { jwtDecode } from \"jwt-decode\";\r\nimport { Button, Form, Row, Col, Container, Navbar, Nav } from 'react-bootstrap';\r\n\r\nconst Login = () => {\r\n  // Stanja za login\r\n  const [username, setUsername] = useState(\"\");\r\n  const [password, setPassword] = useState(\"\");\r\n  const [jwt, setJwt] = useLocalState(\"\", \"jwt\");\r\n  const [loginError, setLoginError] = useState(\"\");\r\n\r\n  // Funkcija za provjeru rola nakon dekodiranja JWT-a\r\n  const checkRoles = () => {\r\n    if (jwt) {\r\n      const decoded = jwtDecode(jwt);\r\n      if (decoded.roles[0].authority === \"ADMIN\") {\r\n        window.location.href = \"/admin\";\r\n      }\r\n      if (decoded.roles[0].authority === \"USER\") {\r\n        window.location.href = \"/user\";\r\n      }\r\n    }\r\n  };\r\n\r\n  // Effect koji će se izvršiti kada se promijeni jwt\r\n  useEffect(() => {\r\n    checkRoles();\r\n  }, [jwt]);\r\n\r\n  // Funkcija za slanje zahtjeva za prijavu\r\n  const sendLoginRequest = async () => {\r\n    try {\r\n      const reqBody = {\r\n        \"username\": username,\r\n        \"password\": password,\r\n      };\r\n\r\n      const response = await fetch(\"http://localhost:8080/api/v1/auth/authenticate\", {\r\n        headers: {\r\n          \"Content-Type\": \"application/json\",\r\n        },\r\n        method: \"POST\",\r\n        body: JSON.stringify(reqBody),\r\n      });\r\n\r\n      if (response.ok) {\r\n        const data = await response.json();\r\n        setJwt(data.token);\r\n        checkRoles();\r\n      } else {\r\n        setLoginError(\"Invalid username or password\");\r\n      }\r\n    } catch (error) {\r\n      console.error(\"Error:\", error);\r\n    }\r\n  };\r\n\r\n  // JSX za prikaz komponente\r\n  return (\r\n    <Container className=\"justify-content-md-center\">\r\n      {/* Navbar */}\r\n      {/* ... Ostatak vašeg koda ... */}\r\n\r\n      {/* Forma za prijavu */}\r\n      <Form noValidate>\r\n        {/* ... Ostatak vašeg koda ... */}\r\n        <Row className=\"justify-content-md-center\">\r\n          <Col xs={6}>\r\n            {loginError && <div style={{ color: 'red' }}>{loginError}</div>}\r\n          </Col>\r\n        </Row>\r\n        <Row className=\"justify-content-md-center\">\r\n          <Col xs={2}>\r\n            <Button\r\n              className=\"mb-3\"\r\n              onClick={() => sendLoginRequest()}\r\n            >Prijavi se</Button>\r\n          </Col>\r\n        </Row>\r\n      </Form>\r\n    </Container>\r\n  );\r\n};\r\n\r\nexport default Login;"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}